#ifndef __FONTLOADER__
#define __FONTLOADER__

// SDK includes
#include <psptypes.h>

// Freetype includes
#include <ft2build.h>
#include FT_FREETYPE_H

//Freetype Library Instance
FT_Library  ft_library;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font Texture Struct
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	int textureWidth;  // the real width of data
	int textureHeight;  // the real height of data
	int width;  // the given width
	int height; // the given height
	u32* data;
} FontTexture;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font Struct
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	char* name;
	FT_Face face;
	u8* data;
} Font;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_Load
//
// Usage: Font* myFont = Font_Load("theFont.ttf");
// Returns 0 on error
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Font* Font_Load(const char* filename);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_Unload
//
// Usage: Font_Unload(myFont);
// 'myFont' is a pointer to an open font file
// Free memory when a font is no longer required
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int Font_Unload(Font* font);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_SetSize
//
// Usage: Font_SetSize(myFont, 60);
// 'myFont' is a pointer to an open font file
// '60' is the size (in pixels)
// Set the size of the font (in pixels)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int Font_SetSize(Font* font, int height);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_PrintScreen
//
// Usage: Font_PrintScreen(othFont, 100, 100, "2nd Font", GU_RGBA(255, 255, 255, 255), framebuffer);
// 'othFont' is a pointer to an open font file
// '100' is the x position on the screen
// '100' is the y position on the screen
// "2nd Font" is the text to print
// GU_RGBA(255, 255, 255, 255) is the color of the text
// Note: You can use any valid u32 color format
// Such as 0xFFFFFFFF, GU_RGBA(255, 255, 255, 255) or a 'Color' variable (from the graphics lib)
// 'framebuffer' is a pointer to the current framebuffer
// ie. getVramDrawBuffer() for the graphics lib
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int Font_PrintScreen(Font* font, int x, int y, const char* text, u32 color, u32* framebuffer);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_RenderTexture
//
// Usage: Font_RenderTexture(myFont, 0, 50, "1st Font", GU_RGBA(255, 255, 255, 255), myFontTexture);
// 'myFont' is a pointer to an open font file
// '0' is the x position on the texture
// '100' is the y position on the texture
// "1st Font" is the text to print to the texture
// GU_RGBA(255, 255, 255, 255) is the color of the text
// Note: You can use any valid u32 color format
// Such as 0xFFFFFFFF, GU_RGBA(255, 255, 255, 255) or a 'Color' variable (from the graphics lib)
// 'myFontTexture' is a valid FontTexture struct
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int Font_RenderTexture(Font* font, int x, int y, const char* text, u32 color, FontTexture* fonttexture);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_CreateTexture
//
// Usage: myFontTexture = Font_CreateTexture(100, 200);
// 'myFontTexture' is a valid FontTexture struct
// '100' is the width of the texture
// '200' is the height of the texture
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FontTexture* Font_CreateTexture(int width, int height);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_ClearTexture
//
// Usage: Font_ClearTexture(myFontTexture);
// 'myFontTexture' is a valid FontTexture struct
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Font_ClearTexture(FontTexture* fonttexture);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_DisplayTexture
//
// Usage: Font_DisplayTexture(myFontTexture, 100, 200);
// 'myFontTexture' is a valid FontTexture struct
// '100' is the x position of the texture
// '200' is the y position of the texture
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Font_DisplayTexture(FontTexture* source, int dx, int dy);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Font_UnloadTexture
//
// Usage: Font_UnloadTexture(myFontTexture);
// 'myFontTexture' is a valid FontTexture struct
// Free memory when a font texture is no longer required
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Font_UnloadTexture(FontTexture* fonttexture);

#endif
